version: "3"

set: [pipefail, e]

shopt: [globstar, nullglob]

output: 
  group:
    begin: '::group::{{.TASK}}'
    end: '::endgroup::'

vars:
  # Proj related vars
  PROJECT_DIR: "{{.USER_WORKING_DIR}}"
  BUILD_DIR: "{{.PROJECT_DIR}}/build"
  LOCAL_BIN: "{{.PROJECT_DIR}}/bin"
  # Image related vars
  IMAGE_REGISTRY: "ghcr.io/mellanox"
  IMAGE_REPOSITORY: "network-operator-init-container"
  IMAGE_TAG: "latest"
  IMAGE_NAME_FULL: "{{.IMAGE_REGISTRY}}/{{.IMAGE_REPOSITORY}}:{{.IMAGE_TAG}}"
  # Coverage related vars
  COVER_PROFILE: "{{.PROJECT_DIR}}/network-operator-init-container.cover"
  # Test related vars
  ENVTEST_K8S_VERSION: 1.27.1

includes:
  version: ./taskfiles/Version.yaml
  install:
    taskfile: ./taskfiles/InstallDeps.yaml
    vars:
      BIN_DIR: "{{.LOCAL_BIN}}"
  kind: ./taskfiles/Kind.yaml
  image: ./taskfiles/Image.yaml

tasks:
  clean:
    desc: remove downloaded tools and compiled binaries
    cmd: |
      rm -rf {{.LOCAL_BIN}}
      rm -rf {{.BUILD_DIR}}
      rm -f {{.COVER_PROFILE}}
  
  create-dirs:
    desc: prepare build related directories
    internal: true
    cmds:
      - mkdir -p {{.LOCAL_BIN}}
      - mkdir -p {{.BUILD_DIR}}
    status:
      - test -d {{.LOCAL_BIN}}
      - test -d {{.BUILD_DIR}}

  build:
    desc: build network-operator-init-container binary
    deps:
      - task: create-dirs
    vars:
      GO_BUILD_OPTS: "CGO_ENABLED=0 GOOS={{OS}} GOARCH={{ARCH}}"
    cmd: |
      {{.GO_BUILD_OPTS}} go build -ldflags "{{.VERSION_LDFLAGS}}" -o {{.BUILD_DIR}}/network-operator-init-container ./cmd/network-operator-init-container/main.go
    sources:
      - cmd/**/*.go
      - pkg/**/*.go
    generates:
      - "{{.BUILD_DIR}}/network-operator-init-container"

  test:
    desc: run unit tests
    deps:
      - install:setup-envtest
    vars:
      COVER_MODE: atomic
      GO_PKGS:
        sh: go list ./... | grep -v ".*/mocks"
    cmd: |
      export KUBEBUILDER_ASSETS=$({{.LOCAL_BIN}}/setup-envtest use {{.ENVTEST_K8S_VERSION}} -p path);
      go test -covermode={{.COVER_MODE}} -coverprofile={{.COVER_PROFILE}} {{.GO_PKGS | catLines}}

  lint:
    desc: run lint tests
    deps:
      - install:golangci-lint
    cmd: "{{.LOCAL_BIN}}/golangci-lint run --timeout 10m"
